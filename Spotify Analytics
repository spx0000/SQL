# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.
#Next, I explored the data using the following SQL. 

-- Top 10 songs based on popularity
SELECT *
FROM BIT_DB.Spotifydata
ORDER BY popularity desc LIMIT 10;

--How many songs did each artist_name publis
SELECT DISTINCT artist_name, COUNT(track_name) AS NumberOfSongs
FROM BIT_DB.Spotifydata
GROUP BY artist_name;

--What is the track_name of the longest song duration_ms
SELECT track_name
FROM BIT_DB.Spotifydata
ORDER BY duration_ms desc LIMIT 1;

--Top 3 songs based on liveness
SELECT track_name, liveness
FROM BIT_DB.Spotifydata
ORDER BY liveness desc LIMIT 3;

--Determine the avg popularity, danceability, and enegry by artist and track
SELECT artist_name ,track_name,avg(popularity),avg(danceability),avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

--Top 5 artists based off popularity
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc LIMIT 5;
